//---------------- Trigger Opportunity --------------//
trigger OppBoss on Opportunity (before insert, after insert, before update, after update) {
 
       if (Trigger.isBefore && Trigger.isInsert) {
        for (Opportunity op : Trigger.new) {
            if (op.LeadSource == 'Web' || op.LeadSource == 'Purchased List') {
                op.Description = 'Essa oportunidade deverá ter uma atenção especial, alta chance de fechamento!!';
                op.StageName = 'Qualification';
            }
        }
    }    
     if (Trigger.isBefore && Trigger.isUpdate) {
        for (Opportunity op : Trigger.new) {
            if (trigger.oldMap.get(op.id).LeadSource != trigger.newMap.get(op.id).LeadSource) {
                op.addError('Após a definição de uma origem do lead, não é possível modifica-la.');
            }
        }
    }
    
    if  (Trigger.isBefore && Trigger.isUpdate) { 
        for (Opportunity op : Trigger.new) {
            if ((op.Amount < 10000) && (trigger.newMap.get(op.id).StageName == 'Perception Analysis' || trigger.newMap.get(op.id).StageName == 'Negotiation/Review')) {
                op.addError('A oportunidade é muito baixa, não permitido entrar nessa fase');
            }                 
            
        }
    }
        if (Trigger.isBefore && Trigger.isUpdate) {
        for (Opportunity op : Trigger.new) {
            if ((trigger.oldMap.get(op.id).StageName == 'Closed Won' || trigger.oldMap.get(op.id).StageName == 'Closed Lost') && trigger.newMap.get(op.id).StageName != trigger.oldMap.get(op.id).StageName) {
                op.addError('Num vai dar não!!');
            } 
}
  }
    if (Trigger.isAfter && Trigger.isInsert) {
        for (Opportunity op : Trigger.new) {
            if (op.Amount > 100000){
                List<Task> lst = New List<Task>();
                Task task = new Task(
                ActivityDate = date.today() + 10,
                subject = 'Tentar fechar essa o quanto antes!!!!!',
                    WhatID = op.id,
                    Priority = 'High',
                    Status = 'Not Started'
                );
               lst.add(Task);
        if(lst.size()>0) {
                Insert lst;
    		}
      }     
	} 
}
     if (Trigger.isAfter && Trigger.isUpdate) {
        for (Opportunity op : Trigger.new) {
            if (trigger.oldMap.get(op.id).StageName == 'Negotiation/Review' && op.Amount > 250000 && trigger.newMap.get(op.id).StageName == 'Closed Won') {
             List<Case> caso = new List<Case>();
                Case c = new Case(Subject = 'Novo procedimento de instalação', Status = 'New', Reason = 'Instalation', Type = 'Structural', AccountId = op.AccountId);
            caso.add(c);     
           
        
            if(!caso.isEmpty()) {
                insert caso;
            }
    }
   }
 } 
}


//-------------- Classe de Teste -------------//


@isTest
public class OppBossTeste {
    @isTest
public static void test(){
        Opportunity opportunity = new Opportunity(
        Name = 'Nova oportunidade',
        CloseDate = date.today(),
        StageName  = 'Closed Won',
        LeadSource = 'Web',
        Amount = 700000
        );
    insert opportunity;
    Opportunity Recovery = [Select Id, Description, StageName From Opportunity];
    System.assertEquals('Essa oportunidade deverá ter uma atenção especial, alta chance de fechamento!!', recovery.Description);
	System.assertEquals('Qualification', recovery.StageName);
}@isTest
public static void tes1t(){
        Opportunity opportunity = new Opportunity(
        Name = 'Nova oportunidade',
        CloseDate = date.today(),
        StageName  = 'Closed Won',
        LeadSource = 'Web',
        Amount = 700000
        );
    insert opportunity;
    opportunity.LeadSource = 'Phone Inquiry';
  try{ 
        update opportunity;
    }catch(DMLException e){
            System.assert(e.getMessage().contains('Após a definição de uma origem do lead, não é possível modifica-la.'));
    }
}	
    
@isTest
public static void tesat(){
        Opportunity opportunity = new Opportunity(
        Name = 'Nova oportunidade',
        CloseDate = date.today(),
        StageName  = 'Perception Analysis',
        LeadSource = 'Web',
        Amount = 10
        );
    insert opportunity;
    opportunity.StageName = 'Negotiation/Review';
     try{ 
        update opportunity;
    }catch(DMLException e){
            System.assert(e.getMessage().contains('A oportunidade é muito baixa, não permitido entrar nessa fase'));
    }
}@isTest
public static void test2(){
        Opportunity opportunity = new Opportunity(
        Name = 'Nova oportunidade',
        CloseDate = date.today(),
        StageName  = 'Closed Won',
        LeadSource = 'Web',
        Amount = 700000
        );
    insert opportunity;
    opportunity.StageName = 'Negotiation/Review';
    try{ 
        update opportunity;
    }catch(DMLException e){
            System.assert(e.getMessage().contains('Num vai dar não!!'));
    }
    
}@isTest 
	public static void TaskLead(){       
        Account account = new Account(
    	Name = 'Pedro Vip',
    	Vip1__c = True,
    	CNPJ__c = '23293616425185'
        );
    insert account;
        Opportunity opportunity = new Opportunity(
        Name = 'Nova oportunidade',
        CloseDate = date.today(),
        StageName  = 'Closed Won',
        LeadSource = 'Web',
        Amount = 1000000,
        AccountId = Account.Id
        
        );
    insert opportunity;
		
            Task created = [SELECT WhatId FROM Task WHERE WhatId =: opportunity.Id];
        system.assertEquals(created.WhatId, opportunity.Id);
		System.Debug(created.WhatId + ' ' + opportunity.Id);   
            
    }@isTest 
		public static void oppCase(){              
        Account account = new Account(
    	Name = 'Pedro Vip',
    	Vip1__c = True,
    	CNPJ__c = '23293616425185'
        );
        Opportunity opportunity = new Opportunity(
        Name = 'Nova oportunidade',
        CloseDate = date.today(),
        StageName  = 'Negotiation/Review',
        LeadSource = 'Web',
        Amount = 1000000
        
        );
        insert opportunity;
        opportunity.StageName = 'Closed Won';
        update opportunity;
        Opportunity recovery =[Select id, accountId from opportunity];
        Case[] cases = [SELECT Id, AccountId FROM case WHERE AccountId =: recovery.AccountId];
            for (Case caso : cases) {
        system.assertEquals(caso.AccountId, recovery.AccountId);
		System.Debug(caso.AccountId + ' ' + recovery.AccountId);         
}
}
}
